@{
    ViewData["Title"] = "Выбор серии аниме ";
}

<h1>@ViewData["Title"] @ViewData["Anime"]</h1>
<br />
<div class="container">
    <div class="row">
        <div class="col-2">
            <label class="col-form-label">Выберите серию</label>
        </div>
        <div class="col-4">
            <select class="selectpicker episode-selector" data-width="100%"></select>
        </div>
        <div class="col-2">
            <label class="col-form-label">Качество</label>
        </div>
        <div class="col-4">
            <select class="selectpicker quality-selector" data-width="100%"></select>
        </div>
    </div>
</div>

<div class="container player">
    <video preload="none" id="player" autoplay controls></video>
</div>

<script>
    var episodes = [];
    var qualities = [];
    var EpisodeSelector = null;
    var QualitySelector = null;

    function GetEpisodes() {
        var url = new URL(window.location.href);
        var providerName = url.searchParams.get("providerName");
        var url = url.searchParams.get("url");

        $.get('/api/episodes', { providerName, url }, function (response, status) {
            episodes = response;

            EpisodeSelector = $('select.episode-selector');

            for (var episodeIteratior in response) {
                var episode = response[episodeIteratior];
                EpisodeSelector.append('<option value="' + episodeIteratior + '">' + episode.name + '</option>');
            }

            EpisodeSelector.selectpicker('refresh');
            EpisodeSelector.on("changed.bs.select", function (e, clickedIndex, newValue, oldValue) {
                if (typeof this.value != "undefined") {
                    GetVideoLinks();
                }
            });
            GetVideoLinks();
        });
    }

    function GetVideoLinks() {
        QualitySelector = $('select.quality-selector');
        QualitySelector.on("changed.bs.select", function (e, clickedIndex, newValue, oldValue) {
            if (typeof this.value != "undefined") {
                PlayVideo();
            }
        });
        QualitySelector.html('');

        var episode = episodes[EpisodeSelector.val()];
        if (episode.isDirect) {
            QualitySelector.append('<option value="' + episode.link + '">Прямая ссылка на видеофайл</option>');
            QualitySelector.selectpicker('refresh');
            PlayVideo();
        } else {
            $.get('/api/directlink', { url: episode.link }, function (response, status) {
                qualities = response;
                for (var qualityIterator in qualities) {
                    var quality = qualities[qualityIterator];
                    QualitySelector.append('<option value="' + quality.item2 + '">' + quality.item1 + '</option>');
                }
                QualitySelector.selectpicker('refresh');
                PlayVideo();
            });
        }
    }

    function PlayVideo(url) {
        $('.player').html('<video preload="none" id="player" autoplay controls></video>');
        var video = document.querySelector('#player');
        if (QualitySelector.val().includes('m3u')) {
            if (Hls.isSupported()) {
                var hls = new Hls();
                hls.loadSource(QualitySelector.val());
                hls.attachMedia(video);
                hls.on(Hls.Events.MANIFEST_PARSED, function () {
                    video.play();
                });
            }
        } else {
            $('#player').html('<source src="' + QualitySelector.val() + '" type="video/mp4">');
        }
        plyr.setup(video);
    }

    $(function () {
        GetEpisodes();
    });
</script>

@section Styles {
    <link rel="stylesheet" href="https://cdn.plyr.io/1.8.2/plyr.css">
}
@section Scripts {
    <script src="https://cdn.plyr.io/1.8.2/plyr.js"></script>
    <script src="https://cdn.jsdelivr.net/hls.js/latest/hls.js"></script>
}